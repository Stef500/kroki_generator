#!/bin/bash
# Kroki Flask Generator - Installation Script
# Installs and runs the complete Kroki diagram generation service

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
REPO_URL="https://raw.githubusercontent.com/Stef500/kroki_generator/main"
COMPOSE_FILE="deploy/docker-compose.yml"
DEFAULT_PORT=8080
APP_PORT=${APP_PORT:-$DEFAULT_PORT}

echo -e "${BLUE}üöÄ Kroki Flask Generator - Installation${NC}"
echo "========================================"

# Check if Docker is installed
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©.${NC}"
    echo "   Installez Docker depuis: https://docs.docker.com/get-docker/"
    exit 1
fi

# Check if docker-compose is available
if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas disponible.${NC}"
    echo "   Installez Docker Compose depuis: https://docs.docker.com/compose/install/"
    exit 1
fi

# Set docker-compose command
if command -v docker-compose &> /dev/null; then
    COMPOSE_CMD="docker-compose"
else
    COMPOSE_CMD="docker compose"
fi

echo -e "${BLUE}üì¶ R√©cup√©ration de la configuration de d√©ploiement...${NC}"

# Download docker-compose.yml from GitHub
if curl -sSL "${REPO_URL}/${COMPOSE_FILE}" -o docker-compose.yml; then
    echo -e "${GREEN}‚úÖ Configuration r√©cup√©r√©e avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Impossible de r√©cup√©rer la configuration${NC}"
    echo "   V√©rifiez votre connexion internet ou r√©cup√©rez manuellement :"
    echo "   ${REPO_URL}/${COMPOSE_FILE}"
    exit 1
fi

echo -e "${BLUE}üì¶ T√©l√©chargement des images Docker...${NC}"

# Pull latest images
if $COMPOSE_CMD pull; then
    echo -e "${GREEN}‚úÖ Images t√©l√©charg√©es avec succ√®s${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Erreur lors du t√©l√©chargement des images${NC}"
    echo "   Continuons quand m√™me..."
fi

# Check if port is already in use
if lsof -i :$APP_PORT > /dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Le port $APP_PORT est d√©j√† utilis√©${NC}"
    echo "   D√©finissez un autre port avec: APP_PORT=3000 ./install.sh"
    echo "   Ou arr√™tez le service utilisant le port $APP_PORT"
    read -p "Continuer quand m√™me ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo -e "${BLUE}üéØ D√©marrage des services...${NC}"

# Start services
export APP_PORT
if $COMPOSE_CMD up -d; then
    echo -e "${GREEN}‚úÖ Services d√©marr√©s avec succ√®s${NC}"
else
    echo -e "${RED}‚ùå Erreur lors du d√©marrage des services${NC}"
    echo "   Consultez les logs avec: $COMPOSE_CMD logs"
    exit 1
fi

echo -e "${BLUE}‚è≥ V√©rification du d√©marrage de l'application...${NC}"

# Wait for services to be ready
max_attempts=30
attempt=0
while [ $attempt -lt $max_attempts ]; do
    if curl -s http://localhost:$APP_PORT/health > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Application d√©marr√©e et accessible !${NC}"
        echo
        echo "üåê Application disponible sur: http://localhost:$APP_PORT"
        echo "üîó Interface web: http://localhost:$APP_PORT"
        echo "üìä Health check: http://localhost:$APP_PORT/health"
        echo
        echo -e "${BLUE}üìã Commandes utiles:${NC}"
        echo "   Voir les logs:     $COMPOSE_CMD logs -f"
        echo "   Arr√™ter:          $COMPOSE_CMD down"
        echo "   Red√©marrer:       $COMPOSE_CMD restart"
        echo "   Mettre √† jour:    $COMPOSE_CMD pull && $COMPOSE_CMD up -d"
        echo
        exit 0
    fi
    
    echo -e "${YELLOW}.${NC}" | tr -d '\n'
    sleep 2
    attempt=$((attempt + 1))
done

echo
echo -e "${YELLOW}‚ö†Ô∏è  L'application met plus de temps que pr√©vu √† d√©marrer${NC}"
echo "   V√©rifiez les logs avec: $COMPOSE_CMD logs"
echo "   L'application sera bient√¥t disponible sur: http://localhost:$APP_PORT"