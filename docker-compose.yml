services:
  # Main Flask application
  app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - KROKI_URL=http://kroki:8000
      - REQUEST_TIMEOUT=15
      - MAX_BYTES=2000000
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
    depends_on:
      kroki:
        condition: service_healthy
    networks:
      - kroki-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kroki service for diagram generation  
  kroki:
    image: yuzutech/kroki:latest
    ports:
      - "8000:8000"
    environment:
      - KROKI_MERMAID_HOST=mermaid
      - KROKI_MERMAID_PORT=8002
      - KROKI_EXCALIDRAW_HOST=excalidraw
      - KROKI_EXCALIDRAW_PORT=8004
    depends_on:
      mermaid:
        condition: service_started
      excalidraw:
        condition: service_started
    networks:
      - kroki-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Mermaid companion service
  mermaid:
    image: yuzutech/kroki-mermaid:latest
    expose:
      - "8002"
    networks:
      - kroki-network
    restart: unless-stopped
    environment:
      - PUPPETEER_ARGS=--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage

  # Excalidraw companion service
  excalidraw:
    image: yuzutech/kroki-excalidraw:latest
    expose:
      - "8004"
    networks:
      - kroki-network
    restart: unless-stopped

networks:
  kroki-network:
    driver: bridge

volumes:
  app_logs:
    driver: local